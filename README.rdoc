= Load Wedge

{Website}[http://github.com/rubyworks/load] |
{Development}[http://github.com/rubyworks/load] |
{Mailing List}[http://groups.google.com/group/rubyworks-mailinglist]
----
Author:: Thomas Sawyer
License:: BSD-2-Clause
Copyright:: (c) 2010 Thomas Sawyer


== DESCRIPTION

The Load Wedge gem provides an easy to use interface for adding custom
load managers to Ruby's standard load system, namely the `load` 
and `require` methods.

In addition, Load includes two pre-assembled load wedges that prevent 
load interference between ruby and gems packages libraries.


== USAGE

=== Installation

Installing via RubyGems follows the usual pattern. The gem is called
`load_wedge`.

  $ gem install load_wedge


=== Creating Load Wedges

Load Wedge was written initially to provide the specific capability of loading
Ruby standard libraries without potential interference from libraries
installed via RubyGems (see INFRACTIONS.rdoc). The code ultimately evolved
into a more generic tool, useful for writing any kind of plug-in load
manager. 

The code for the Ruby wedge serves as a good example of writing a wedge.

  require 'load/wedge'
  require 'rbconfig'

  class Load::RubyWedge < Load::Wedge

    # Notice that rubylibdir takes precedence.
    LOCATIONS = ::RbConfig::CONFIG.values_at(
      'rubylibdir', 'archdir', 'sitelibdir', 'sitearchdir'
    )

    #
    def call(fname, options={})
      return unless md = /^ruby[:\/]/.match(fname)

      file = md.post_match

      LOCATIONS.each do |loadpath|
        if path = find(loadpath, file, options)
          return super(path, options)
        end
      end

      raise LoadError, "no such file to load -- #{fname}"
    end

  end

  Load::Wedge.register(Load::RubyWedge.new)

The `Load::Wedge` base class is just a convenience class. One could write a load
wedge without it. The interface is very simple. Any object the responds to #call
taking parameters of <code>(fname, options={})</code> can be used as a load
wedge. Simply register it via:

  Load::Wedge.register(mywedge)

There is also a Load::Wedge::Helper mixin that can be used as well, which
provides a few methods that can be generally useful to any load manager,

You might wonder how the single method, #call, handles both #load and #require
operations. The secret is in the +options+ hash. If <code>options[:load]</code>
resolves to true, then it is a +load+ operation, otherwise it is a +require+
operation.

As wedges are registered, they are added to a list in order of registration.
When #load or #require is called each wedge is tried in turn. The return value
of #call controls how this loop proceeds. If the return value is +true+ then the
load was successful, and the loop can break. If it is +false+ it means the
loading has already been handled and the loop can also break. But if the
return value is +nil+, it means the wedge does not apply and the loop should
continue. If all wedges have been tried and all have returned +nil+ then it
falls back to the original #load and #require calls.

=== Prefab Wedges

Load provides two wedges out-of-the-box, the Ruby wedge and the Gem wedge.

==== Ruby Wedge

The Ruby wedge makes it possible to load a Ruby standard library without
interference from installed gems or other package systems. It does this by 
adding a new valid syntax to Ruby's #load and #require methods.

  require 'wedge/ruby'

  require 'ostruct', :from=>'ruby'

This will load the ostruct.rb script from the Ruby standard library regardless
of whether a someone else dropped an `ostruct.rb` file in their projects lib/ 
directory without understanding the potential consequences.

==== Gem Wedge

The Gem wedge is similar to the Ruby wedge, in that it isolates the loading
of a gem's files from other gems.  

  require 'wedge/gem'

  gem 'facets', '~>2.8'

  require 'string/margin', :from=>'facets'

With this we can be sure that 'facets/string/margin' was loaded from the facets
library regardless of whether some other gem put a 'facets/string/margin' file
in their lib/ directory.

To use the Gem wedge, add it to your RUBYOPT environment variable, e.g.

  RUBYOPT="-rload/gem"

The Gem wedge will load `rubygems.rb` automatically so you don't need to
have both `-rubygems` and `-rwedge/gem` in the same RUBYOPT.


== COPYING

Copyright (c) 2010 Thomas Sawyer, Rubyworks

Load is distributed under the terms of the BSD 2-Clause License.

See COPYING.rdoc file for details.

