= Load Wedge

{Website}[http://github.com/rubyworks/loader] |
{Development}[http://github.com/rubyworks/loader] |
{Mailing List}[http://groups.google.com/group/rubyworks-mailinglist]


== DESCRIPTION

The Loader gem provides an easy to use interface for adding custom
load managers to Ruby's standard load system, namely the `load` 
and `require` methods.

In addition, it includes two pre-assembled load wedges that prevent 
load interference between ruby's standard library and gem packages
(see INFRACTIONS.rdoc).


== USAGE

=== Installation

Installing via RubyGems follows the usual pattern. The gem is called
`load_wedge`.

  $ gem install load_system


=== Creating Load Wedges

Load Wedge was written initially to provide the specific capability of loading
Ruby standard libraries without potential interference from libraries
installed via RubyGems (see INFRACTIONS.rdoc). The code ultimately evolved
into a more generic tool, useful for writing any kind of plug-in load
manager. 

The code for the Ruby wedge serves as a good example of writing a wedge.

  require 'rbconfig'
  require 'rbconfig/load_wedge'

  class RbConfig::RubyWedge < RbConfig::LoadWedge

    # Notice that rubylibdir takes precedence.
    LOCATIONS = ::RbConfig::CONFIG.values_at(
      'rubylibdir', 'archdir', 'sitelibdir', 'sitearchdir'
    )

    #
    def call(fname, options={})
      return unless options[:from].to_s == 'ruby'

      LOCATIONS.each do |loadpath|
        if path = find(loadpath, fname, options)
          return super(path, options)
        end
      end

      raise LoadError, "no such file to load -- #{fname}"
    end

  end

  $LOAD_WEDGE << Load::RubyWedge.new

The `LoadWedge` base class is just a convenience class. Load wedges can be easily
written wihtout it. The interface is quite simple. Any object the responds
to #call, taking parameters of <code>(fname, options={})</code>, can be used as
a load wedge. Simply activate if by adding it to the $LOAD_WEDGE global variable.

  $LOAD_WEDGE << mywedge

There is also a `RbConfig::LoadWedge::Helper` mixin which provides the crux of
the LoadWedge classes features, namely a few methods that might be useful to
any load wedge. An example if the `find` method used in the example, which
will will search an array of load paths in accordance with the Ruby's built-in
require and load lookup procedures.

You might wonder how the single method, `#call`, handles both load and require
operations. The secret is in the +options+ hash. If <code>options[:load]</code>
resolves to true, then it is a +load+ operation, otherwise it is a +require+
operation. The $LOAD_WEDGE global varaible is iterated over in order.
When `#load` or `#require` is called each wedge is tried in turn. The return
value of `#call` controls how this loop proceeds. If the return value is +true+
then the load was successful, and the loop can break. If it is +false+ it means
the loading has already been handled and the loop can also break. But if the
return value is +nil+, it means the wedge does not apply and the loop should
continue. If all wedges have been tried and all have returned +nil+ then it
falls back to the original #load and #require calls.

=== Prefabricated Wedges

The Loader gem provides two load wedges out-of-the-box, the Ruby wedge and the
Gem wedge.

==== Ruby Wedge

The Ruby wedge makes it possible to load a Ruby standard library without
interference from installed gems or other package systems. It does this by 
adding a new valid syntax to Ruby's #load and #require methods.

  require 'rbconfig/ruby_wedge'

  require 'ostruct', :from=>'ruby'

This will load the ostruct.rb script from the Ruby standard library regardless
of whether a someone else dropped an `ostruct.rb` file in their projects lib/ 
directory without understanding the potential consequences.

==== Gem Wedge

The Gem wedge is similar to the Ruby wedge, in that it isolates the loading
of a gem's files from other gems.  

  require 'rbconfig/gem_wedge'

  gem 'facets', '~>2.8'

  require 'string/margin', :from=>'facets'

With this we can be sure that 'facets/string/margin' was loaded from the facets
library regardless of whether some other gem has a 'facets/string/margin' file
in its lib/ directory.

=== Autoloading

To load both the Gem and Ruby wedges, and the entire wedge system,
add `load_system` to your RUBYOPT environment variable, e.g.

  $ export RUBYOPT="-rload_wedge"

Place this in your shell's configuration file, such as `~/.bashrc`.


== COPYING

Copyright (c) 2010 Thomas Sawyer, Rubyworks

Load is distributed under the terms of the BSD 2-Clause License.

See COPYING.rdoc file for details.

-----
Author:: Thomas Sawyer
License:: BSD-2-Clause
Copyright:: (c) 2010 Thomas Sawyer

